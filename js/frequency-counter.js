document.querySelector("h1").innerText = "Frequency Counter";

// to calculate if given array have same frequency or not .
// array1 should be square of array2 , order of items does not matter.

// eg [1,2,3] , [4,1,9] => true
// [1,2.3] , [1,4] => false
// [1,2,3] , [4,4,1] => false

// sort and then check

const same = (a1, a2) => {
  // check if length of a1 and a2 are same, if not return false
  if (a1.length !== a2.length) {
    return false;
  }
  // sort a1 and a2 in ascending order
  a1 = a1.sort(function (i, j) {
    return i - j;
  });
  a2 = a2.sort(function (i, j) {
    return i - j;
  });
  // square each item of a1
  a1 = a1.map((i) => i * i);

  // check if a1 === a2
  return a1.join("") === a2.join("");
};
console.time("same using sort");
console.log(
  same(
    [
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
    ],
    [
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
    ]
  )
);
console.timeEnd("same using sort");

const same1 = (a1, a2) => {
  // check if length of a1 and a2 are same, if not return false
  if (a1.length !== a2.length) {
    return false;
  }

  // map each item of a1 into object o1 {1:1,2:1,3: 1}
  let o1 = {};
  for (const element of a1) {
    o1[element] ? o1[element]++ : (o1[element] = 1);
  }

  // loop over a2
  for (const element of a2) {
    // calculate sq root of each item
    let sqrt_a2 = Math.sqrt(element);

    // if number is not a perfect sq rt return false
    if (element !== 1 && sqrt_a2 % 1 !== 0) {
      return false;
    }

    if (o1[sqrt_a2]) {
      // decrement each value from objects key value pair of each sq root
      o1[sqrt_a2]--;
    } else {
      return false;
    }
  }

  // if each key is 0 return true, else false
  return Object.values(o1).every((i) => i === 0);
};
console.time("same using frequency counter");
console.log(
  same1(
    [
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2,
      3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
      1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1,
      4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4,
      2, 3, 1, 4, 2, 3, 1, 4, 2, 3,
    ],
    [
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16,
      4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1,
      16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
      1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4,
      9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9, 1, 16, 4, 9,
    ]
  )
);
console.timeEnd("same using frequency counter");

console.clear();

// Input: s = "anagram", t = "nagaram"
// Output: true

// Input: (s = "rat"), (t = "car");
// Output: false;
const validAnagram = (s1, s2) => {
  // check if length of s1 and s2 are equal
  if (s1.length !== s2.length) {
    return false;
  }

  let o1 = {};
  let o2 = {};
  // map each char of o1
  for (ele of s1) {
    o1[ele]++ || (o1[ele] = 1);
  }

  // map each char of o2
  for (ele of s2) {
    o2[ele]++ || (o2[ele] = 1);
  }

  // verify if key and value of o1 is present in o2
  for (ele of s1) {
    //  check keys of o2
    debugger;
    if (!(ele in o2)) {
      return false;
    }
    // check values o1 and o2
    if (o1[ele] !== o2[ele]) {
      return false;
    }
  }
  return true;
};
console.log(validAnagram("rat", "car"));
